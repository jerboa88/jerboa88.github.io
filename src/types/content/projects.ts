/**
 * Type definitions for projects and project configs
 */

import type { DateString, SentenceString, UrlString } from '../strings.ts';
import type { Overwrite } from '../utils.ts';

/**
 * An enumeration of possible project types
 *
 * @enum {number}
 */
export enum ProjectType {
	Other = 0,
	GithubRepo = 1,
}

/**
 * Possible project categories
 */
export enum ProjectCategory {
	App = 'App',
	Container = 'Container',
	Document = 'Document',
	Extension = 'Extension',
	Library = 'Library',
	Other = 'Other',
	Plugin = 'Plugin',
	Script = 'Script',
	Website = 'Website',
}

export enum SchemaType {
	Mobile = 'Mobile',
	Software = 'Software',
	Web = 'Web',
}

export enum SchemaApplicationCategory {
	Browser = 'Browser',
	Business = 'Business',
	Communication = 'Communication',
	Design = 'Design',
	DesktopEnhancement = 'DesktopEnhancement',
	Developer = 'Developer',
	Driver = 'Driver',
	Educational = 'Educational',
	Entertainment = 'Entertainment',
	Finance = 'Finance',
	Game = 'Game',
	Health = 'Health',
	Home = 'Home',
	Lifestyle = 'Lifestyle',
	Multimedia = 'Multimedia',
	Reference = 'Reference',
	Security = 'Security',
	Shopping = 'Shopping',
	SocialNetworking = 'SocialNetworking',
	Sports = 'Sports',
	Travel = 'Travel',
	Utilities = 'Utilities',
}

/**
 * A base project with common fields
 *
 * @remarks
 *
 * The fields here must be primitives because they are automatically serialized by Gatsby when passed as props to programmatically generated pages. Making any of these fields an object will break type safety and cause runtime errors.
 *
 * @typeParam T - The type of project
 * @param background - A longer description of the project
 * @param category.color - The color of the project category
 * @param category.name - The name of the project category (ex. 'Website', 'App', etc.)
 * @param createdAt - The date the project was created
 * @param description - A brief description of the project
 * @param homepageUrl - The URL of the project's homepage
 * @param languages - A list of programming languages used in the project
 * @param logoUrl - The URL of the project's logo
 * @param name - The name of the project
 * @param schema.applicationCategory - The schema.org application category of the project
 * @param schema.operatingSystem - The schema.org operating system of the project
 * @param schema.type - The schema.org type of the project
 * @param slug - The slug of the project
 * @param stargazerCount - The number of stars the project has
 * @param subcategory - The subcategory of the project (ex. 'Web', 'Android', etc.)
 * @param tagline - A short tagline for the project
 * @param technologies - A list of technologies used in the project
 * @param tools - A list of tools used in the project
 * @param topics - A list of topics related to the project
 * @param type - The type of project
 * @param updatedAt - The date the project was last updated
 * @param url - The URL of the project
 */
export type BaseProject<T extends ProjectType> = {
	background?: SentenceString;
	category: {
		color: string;
		name?: ProjectCategory;
	};
	createdAt: DateString;
	description: SentenceString;
	homepageUrl?: UrlString;
	languages: readonly string[];
	logoUrl?: UrlString;
	name: string;
	schema?: {
		applicationCategory?: SchemaApplicationCategory;
		operatingSystem?: string;
		type?: SchemaType;
	};
	slug: string;
	stargazerCount?: number;
	subcategory?: Capitalize<string>;
	tagline?: Capitalize<string>;
	technologies: readonly string[];
	tools: readonly string[];
	topics: readonly string[];
	type: T;
	updatedAt: DateString;
	url?: UrlString;
};

/**
 * A manually added project
 *
 * @remarks
 *
 * This overwrites the {@link BaseProject} type to make existing fields required or to add more
 */
export type OtherProject = Overwrite<
	BaseProject<ProjectType.Other>,
	{
		background: SentenceString;
	}
>;

/**
 * A GitHub repo project
 *
 * @remarks
 *
 * This is based on {@link Queries.GithubRepo}, which is autogenerated by Gatsby from the GraphQL schema. It adds additional fields from the {@link BaseProject} type, which are overwritten to make existing fields required or to add more
 */
export type GithubRepoProject = Overwrite<
	Queries.GithubRepo,
	Overwrite<
		BaseProject<ProjectType.GithubRepo>,
		{
			url: UrlString;
		}
	>
>;

/**
 * Union of all project types
 */
export type Project = GithubRepoProject | OtherProject;

/**
 * Config for a manually added project
 */
export type OtherProjectConfig = Overwrite<
	Omit<OtherProject, 'type'>,
	{
		category: ProjectCategory;
		languages?: readonly string[];
		technologies?: readonly string[];
		tools?: readonly string[];
		topics?: readonly string[];
	}
>;

/**
 * Config for manually added projects
 */
export type ProjectsConfig = {
	[ProjectType.Other]: OtherProjectConfig[];
};
