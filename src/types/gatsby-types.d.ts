/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GithubData = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly data: Maybe<GithubDataData>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawResult: Maybe<GithubDataRawResult>;
};

type GithubDataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GithubDataEdge>;
  readonly group: ReadonlyArray<GithubDataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GithubData>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GithubDataConnection_distinctArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataConnection_groupArgs = {
  field: GithubDataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GithubDataConnection_maxArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataConnection_minArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataConnection_sumArgs = {
  field: GithubDataFieldSelector;
};

type GithubDataData = {
  readonly user: Maybe<GithubDataDataUser>;
};

type GithubDataDataFieldSelector = {
  readonly user: InputMaybe<GithubDataDataUserFieldSelector>;
};

type GithubDataDataFilterInput = {
  readonly user: InputMaybe<GithubDataDataUserFilterInput>;
};

type GithubDataDataSortInput = {
  readonly user: InputMaybe<GithubDataDataUserSortInput>;
};

type GithubDataDataUser = {
  readonly repositories: GithubDataDataUserRepositories;
};

type GithubDataDataUserFieldSelector = {
  readonly repositories: InputMaybe<GithubDataDataUserRepositoriesFieldSelector>;
};

type GithubDataDataUserFilterInput = {
  readonly repositories: InputMaybe<GithubDataDataUserRepositoriesFilterInput>;
};

type GithubDataDataUserRepositories = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataDataUserRepositoriesNodes>>>;
};

type GithubDataDataUserRepositoriesFieldSelector = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesFieldSelector>;
};

type GithubDataDataUserRepositoriesFilterInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesFilterListInput>;
};

/** Define required fields from the GitHub GraphQL API schema */
type GithubDataDataUserRepositoriesNodes = {
  readonly createdAt: Scalars['Date'];
  readonly description: Maybe<Scalars['String']>;
  readonly forkCount: Scalars['Int'];
  readonly homepageUrl: Maybe<Scalars['String']>;
  readonly isFork: Scalars['Boolean'];
  readonly languages: Maybe<GithubDataDataUserRepositoriesNodesLanguages>;
  readonly licenseInfo: Maybe<GithubDataDataUserRepositoriesNodesLicenseInfo>;
  readonly name: Scalars['String'];
  readonly openGraphImageUrl: Scalars['String'];
  readonly owner: GithubDataDataUserRepositoriesNodesOwner;
  readonly projectMetadata: Maybe<GithubDataDataUserRepositoriesNodesProjectMetadata>;
  readonly readme: Maybe<GithubDataDataUserRepositoriesNodesReadme>;
  readonly repositoryTopics: GithubDataDataUserRepositoriesNodesRepositoryTopics;
  readonly stargazerCount: Scalars['Int'];
  readonly updatedAt: Scalars['Date'];
  readonly url: Scalars['String'];
  readonly usesCustomOpenGraphImage: Scalars['Boolean'];
};

type GithubDataDataUserRepositoriesNodesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly forkCount: InputMaybe<FieldSelectorEnum>;
  readonly homepageUrl: InputMaybe<FieldSelectorEnum>;
  readonly isFork: InputMaybe<FieldSelectorEnum>;
  readonly languages: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesFieldSelector>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly openGraphImageUrl: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<GithubDataDataUserRepositoriesNodesOwnerFieldSelector>;
  readonly projectMetadata: InputMaybe<GithubDataDataUserRepositoriesNodesProjectMetadataFieldSelector>;
  readonly readme: InputMaybe<GithubDataDataUserRepositoriesNodesReadmeFieldSelector>;
  readonly repositoryTopics: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsFieldSelector>;
  readonly stargazerCount: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly forkCount: InputMaybe<IntQueryOperatorInput>;
  readonly homepageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly isFork: InputMaybe<BooleanQueryOperatorInput>;
  readonly languages: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesFilterInput>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly openGraphImageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<GithubDataDataUserRepositoriesNodesOwnerFilterInput>;
  readonly projectMetadata: InputMaybe<GithubDataDataUserRepositoriesNodesProjectMetadataFilterInput>;
  readonly readme: InputMaybe<GithubDataDataUserRepositoriesNodesReadmeFilterInput>;
  readonly repositoryTopics: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsFilterInput>;
  readonly stargazerCount: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly usesCustomOpenGraphImage: InputMaybe<BooleanQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataDataUserRepositoriesNodesFilterInput>;
};

type GithubDataDataUserRepositoriesNodesLanguages = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataDataUserRepositoriesNodesLanguagesNodes>>>;
};

type GithubDataDataUserRepositoriesNodesLanguagesFieldSelector = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesNodesFieldSelector>;
};

type GithubDataDataUserRepositoriesNodesLanguagesFilterInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesNodesFilterListInput>;
};

type GithubDataDataUserRepositoriesNodesLanguagesNodes = {
  readonly name: Maybe<Scalars['String']>;
};

type GithubDataDataUserRepositoriesNodesLanguagesNodesFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesLanguagesNodesFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesLanguagesNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesNodesFilterInput>;
};

type GithubDataDataUserRepositoriesNodesLanguagesNodesSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesLanguagesSortInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesNodesSortInput>;
};

type GithubDataDataUserRepositoriesNodesLicenseInfo = {
  readonly name: Scalars['String'];
  readonly spdxId: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type GithubDataDataUserRepositoriesNodesLicenseInfoFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly spdxId: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesLicenseInfoFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly spdxId: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesLicenseInfoSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly spdxId: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesOwner = {
  readonly login: Scalars['String'];
};

type GithubDataDataUserRepositoriesNodesOwnerFieldSelector = {
  readonly login: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesOwnerFilterInput = {
  readonly login: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesOwnerSortInput = {
  readonly login: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesProjectMetadata = {
  readonly text: Maybe<Scalars['String']>;
};

type GithubDataDataUserRepositoriesNodesProjectMetadataFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesProjectMetadataFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesProjectMetadataSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesReadme = {
  readonly text: Maybe<Scalars['String']>;
};

type GithubDataDataUserRepositoriesNodesReadmeFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesReadmeFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesReadmeSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopics = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodes>>>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsFieldSelector = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFieldSelector>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsFilterInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFilterListInput>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodes = {
  readonly topic: GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopic;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFieldSelector = {
  readonly topic: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicFieldSelector>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFilterInput = {
  readonly topic: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicFilterInput>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesFilterInput>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesSortInput = {
  readonly topic: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicSortInput>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopic = {
  readonly name: Scalars['String'];
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesTopicSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesNodesRepositoryTopicsSortInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsNodesSortInput>;
};

type GithubDataDataUserRepositoriesNodesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly forkCount: InputMaybe<SortOrderEnum>;
  readonly homepageUrl: InputMaybe<SortOrderEnum>;
  readonly isFork: InputMaybe<SortOrderEnum>;
  readonly languages: InputMaybe<GithubDataDataUserRepositoriesNodesLanguagesSortInput>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly openGraphImageUrl: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<GithubDataDataUserRepositoriesNodesOwnerSortInput>;
  readonly projectMetadata: InputMaybe<GithubDataDataUserRepositoriesNodesProjectMetadataSortInput>;
  readonly readme: InputMaybe<GithubDataDataUserRepositoriesNodesReadmeSortInput>;
  readonly repositoryTopics: InputMaybe<GithubDataDataUserRepositoriesNodesRepositoryTopicsSortInput>;
  readonly stargazerCount: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<SortOrderEnum>;
};

type GithubDataDataUserRepositoriesSortInput = {
  readonly nodes: InputMaybe<GithubDataDataUserRepositoriesNodesSortInput>;
};

type GithubDataDataUserSortInput = {
  readonly repositories: InputMaybe<GithubDataDataUserRepositoriesSortInput>;
};

type GithubDataEdge = {
  readonly next: Maybe<GithubData>;
  readonly node: GithubData;
  readonly previous: Maybe<GithubData>;
};

type GithubDataFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly data: InputMaybe<GithubDataDataFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawResult: InputMaybe<GithubDataRawResultFieldSelector>;
};

type GithubDataFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly data: InputMaybe<GithubDataDataFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawResult: InputMaybe<GithubDataRawResultFilterInput>;
};

type GithubDataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GithubDataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GithubDataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GithubData>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GithubDataGroupConnection_distinctArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataGroupConnection_groupArgs = {
  field: GithubDataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GithubDataGroupConnection_maxArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataGroupConnection_minArgs = {
  field: GithubDataFieldSelector;
};


type GithubDataGroupConnection_sumArgs = {
  field: GithubDataFieldSelector;
};

type GithubDataRawResult = {
  readonly data: Maybe<GithubDataRawResultData>;
};

type GithubDataRawResultData = {
  readonly user: Maybe<GithubDataRawResultDataUser>;
};

type GithubDataRawResultDataFieldSelector = {
  readonly user: InputMaybe<GithubDataRawResultDataUserFieldSelector>;
};

type GithubDataRawResultDataFilterInput = {
  readonly user: InputMaybe<GithubDataRawResultDataUserFilterInput>;
};

type GithubDataRawResultDataSortInput = {
  readonly user: InputMaybe<GithubDataRawResultDataUserSortInput>;
};

type GithubDataRawResultDataUser = {
  readonly repositories: Maybe<GithubDataRawResultDataUserRepositories>;
};

type GithubDataRawResultDataUserFieldSelector = {
  readonly repositories: InputMaybe<GithubDataRawResultDataUserRepositoriesFieldSelector>;
};

type GithubDataRawResultDataUserFilterInput = {
  readonly repositories: InputMaybe<GithubDataRawResultDataUserRepositoriesFilterInput>;
};

type GithubDataRawResultDataUserRepositories = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataRawResultDataUserRepositoriesNodes>>>;
};

type GithubDataRawResultDataUserRepositoriesFieldSelector = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesFieldSelector>;
};

type GithubDataRawResultDataUserRepositoriesFilterInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesFilterListInput>;
};

type GithubDataRawResultDataUserRepositoriesNodes = {
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly forkCount: Maybe<Scalars['Int']>;
  readonly homepageUrl: Maybe<Scalars['String']>;
  readonly isFork: Maybe<Scalars['Boolean']>;
  readonly languages: Maybe<GithubDataRawResultDataUserRepositoriesNodesLanguages>;
  readonly licenseInfo: Maybe<GithubDataRawResultDataUserRepositoriesNodesLicenseInfo>;
  readonly name: Maybe<Scalars['String']>;
  readonly openGraphImageUrl: Maybe<Scalars['String']>;
  readonly owner: Maybe<GithubDataRawResultDataUserRepositoriesNodesOwner>;
  readonly projectMetadata: Maybe<GithubDataRawResultDataUserRepositoriesNodesProjectMetadata>;
  readonly readme: Maybe<GithubDataRawResultDataUserRepositoriesNodesReadme>;
  readonly repositoryTopics: Maybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopics>;
  readonly stargazerCount: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly usesCustomOpenGraphImage: Maybe<Scalars['Boolean']>;
};


type GithubDataRawResultDataUserRepositoriesNodes_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type GithubDataRawResultDataUserRepositoriesNodes_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesFieldSelector = {
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly forkCount: InputMaybe<FieldSelectorEnum>;
  readonly homepageUrl: InputMaybe<FieldSelectorEnum>;
  readonly isFork: InputMaybe<FieldSelectorEnum>;
  readonly languages: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesFieldSelector>;
  readonly licenseInfo: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLicenseInfoFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly openGraphImageUrl: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesOwnerFieldSelector>;
  readonly projectMetadata: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesProjectMetadataFieldSelector>;
  readonly readme: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesReadmeFieldSelector>;
  readonly repositoryTopics: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsFieldSelector>;
  readonly stargazerCount: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesFilterInput = {
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly forkCount: InputMaybe<IntQueryOperatorInput>;
  readonly homepageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly isFork: InputMaybe<BooleanQueryOperatorInput>;
  readonly languages: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesFilterInput>;
  readonly licenseInfo: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLicenseInfoFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly openGraphImageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesOwnerFilterInput>;
  readonly projectMetadata: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesProjectMetadataFilterInput>;
  readonly readme: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesReadmeFilterInput>;
  readonly repositoryTopics: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsFilterInput>;
  readonly stargazerCount: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly usesCustomOpenGraphImage: InputMaybe<BooleanQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesFilterInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguages = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesNodes>>>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesFieldSelector = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFieldSelector>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesFilterInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFilterListInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesNodes = {
  readonly name: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesFilterInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesLanguagesSortInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesNodesSortInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLicenseInfo = {
  readonly name: Maybe<Scalars['String']>;
  readonly spdxId: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesLicenseInfoFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly spdxId: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesLicenseInfoFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly spdxId: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesLicenseInfoSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
  readonly spdxId: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesOwner = {
  readonly login: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesOwnerFieldSelector = {
  readonly login: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesOwnerFilterInput = {
  readonly login: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesOwnerSortInput = {
  readonly login: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesProjectMetadata = {
  readonly text: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesProjectMetadataFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesProjectMetadataFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesProjectMetadataSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesReadme = {
  readonly text: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesReadmeFieldSelector = {
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesReadmeFilterInput = {
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesReadmeSortInput = {
  readonly text: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopics = {
  readonly nodes: Maybe<ReadonlyArray<Maybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodes>>>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsFieldSelector = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFieldSelector>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsFilterInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFilterListInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodes = {
  readonly topic: Maybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopic>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFieldSelector = {
  readonly topic: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicFieldSelector>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFilterInput = {
  readonly topic: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicFilterInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFilterListInput = {
  readonly elemMatch: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesFilterInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesSortInput = {
  readonly topic: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicSortInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopic = {
  readonly name: Maybe<Scalars['String']>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicFieldSelector = {
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicFilterInput = {
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesTopicSortInput = {
  readonly name: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsSortInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsNodesSortInput>;
};

type GithubDataRawResultDataUserRepositoriesNodesSortInput = {
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly forkCount: InputMaybe<SortOrderEnum>;
  readonly homepageUrl: InputMaybe<SortOrderEnum>;
  readonly isFork: InputMaybe<SortOrderEnum>;
  readonly languages: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLanguagesSortInput>;
  readonly licenseInfo: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesLicenseInfoSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly openGraphImageUrl: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesOwnerSortInput>;
  readonly projectMetadata: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesProjectMetadataSortInput>;
  readonly readme: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesReadmeSortInput>;
  readonly repositoryTopics: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesRepositoryTopicsSortInput>;
  readonly stargazerCount: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<SortOrderEnum>;
};

type GithubDataRawResultDataUserRepositoriesSortInput = {
  readonly nodes: InputMaybe<GithubDataRawResultDataUserRepositoriesNodesSortInput>;
};

type GithubDataRawResultDataUserSortInput = {
  readonly repositories: InputMaybe<GithubDataRawResultDataUserRepositoriesSortInput>;
};

type GithubDataRawResultFieldSelector = {
  readonly data: InputMaybe<GithubDataRawResultDataFieldSelector>;
};

type GithubDataRawResultFilterInput = {
  readonly data: InputMaybe<GithubDataRawResultDataFilterInput>;
};

type GithubDataRawResultSortInput = {
  readonly data: InputMaybe<GithubDataRawResultDataSortInput>;
};

type GithubDataSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly data: InputMaybe<GithubDataDataSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawResult: InputMaybe<GithubDataRawResultSortInput>;
};

/** Define schema for custom GithubRepo nodes */
type GithubRepo = Node & {
  readonly background: Maybe<Scalars['String']>;
  readonly category: ProjectCategory;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly createdAt: Scalars['Date'];
  readonly description: Scalars['String'];
  readonly forkCount: Scalars['Int'];
  readonly homepageUrl: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly isFork: Scalars['Boolean'];
  readonly languages: ReadonlyArray<Scalars['String']>;
  readonly licenseInfo: Maybe<GithubDataDataUserRepositoriesNodesLicenseInfo>;
  readonly logoUrl: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly openGraphImageUrl: Scalars['String'];
  readonly owner: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly schema: Schema;
  readonly slug: Scalars['String'];
  readonly stargazerCount: Scalars['Int'];
  readonly tags: ReadonlyArray<Scalars['String']>;
  readonly technologies: ReadonlyArray<Scalars['String']>;
  readonly tools: ReadonlyArray<Scalars['String']>;
  readonly topics: ReadonlyArray<Scalars['String']>;
  readonly updatedAt: Scalars['Date'];
  readonly url: Scalars['String'];
  readonly usesCustomOpenGraphImage: Scalars['Boolean'];
};

type GithubRepoConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GithubRepoEdge>;
  readonly group: ReadonlyArray<GithubRepoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GithubRepo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GithubRepoConnection_distinctArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoConnection_groupArgs = {
  field: GithubRepoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GithubRepoConnection_maxArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoConnection_minArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoConnection_sumArgs = {
  field: GithubRepoFieldSelector;
};

type GithubRepoEdge = {
  readonly next: Maybe<GithubRepo>;
  readonly node: GithubRepo;
  readonly previous: Maybe<GithubRepo>;
};

type GithubRepoFieldSelector = {
  readonly background: InputMaybe<FieldSelectorEnum>;
  readonly category: InputMaybe<ProjectCategoryFieldSelector>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly forkCount: InputMaybe<FieldSelectorEnum>;
  readonly homepageUrl: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly isFork: InputMaybe<FieldSelectorEnum>;
  readonly languages: InputMaybe<FieldSelectorEnum>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoFieldSelector>;
  readonly logoUrl: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly openGraphImageUrl: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly schema: InputMaybe<SchemaFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly stargazerCount: InputMaybe<FieldSelectorEnum>;
  readonly tags: InputMaybe<FieldSelectorEnum>;
  readonly technologies: InputMaybe<FieldSelectorEnum>;
  readonly tools: InputMaybe<FieldSelectorEnum>;
  readonly topics: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<FieldSelectorEnum>;
};

type GithubRepoFilterInput = {
  readonly background: InputMaybe<StringQueryOperatorInput>;
  readonly category: InputMaybe<ProjectCategoryFilterInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly forkCount: InputMaybe<IntQueryOperatorInput>;
  readonly homepageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly isFork: InputMaybe<BooleanQueryOperatorInput>;
  readonly languages: InputMaybe<StringQueryOperatorInput>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoFilterInput>;
  readonly logoUrl: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly openGraphImageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly schema: InputMaybe<SchemaFilterInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly stargazerCount: InputMaybe<IntQueryOperatorInput>;
  readonly tags: InputMaybe<StringQueryOperatorInput>;
  readonly technologies: InputMaybe<StringQueryOperatorInput>;
  readonly tools: InputMaybe<StringQueryOperatorInput>;
  readonly topics: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly usesCustomOpenGraphImage: InputMaybe<BooleanQueryOperatorInput>;
};

type GithubRepoGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<GithubRepoEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<GithubRepoGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<GithubRepo>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type GithubRepoGroupConnection_distinctArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoGroupConnection_groupArgs = {
  field: GithubRepoFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type GithubRepoGroupConnection_maxArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoGroupConnection_minArgs = {
  field: GithubRepoFieldSelector;
};


type GithubRepoGroupConnection_sumArgs = {
  field: GithubRepoFieldSelector;
};

type GithubRepoSortInput = {
  readonly background: InputMaybe<SortOrderEnum>;
  readonly category: InputMaybe<ProjectCategorySortInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly forkCount: InputMaybe<SortOrderEnum>;
  readonly homepageUrl: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly isFork: InputMaybe<SortOrderEnum>;
  readonly languages: InputMaybe<SortOrderEnum>;
  readonly licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoSortInput>;
  readonly logoUrl: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly openGraphImageUrl: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly schema: InputMaybe<SchemaSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly stargazerCount: InputMaybe<SortOrderEnum>;
  readonly tags: InputMaybe<SortOrderEnum>;
  readonly technologies: InputMaybe<SortOrderEnum>;
  readonly tools: InputMaybe<SortOrderEnum>;
  readonly topics: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly usesCustomOpenGraphImage: InputMaybe<SortOrderEnum>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly fileAbsolutePath: Maybe<Scalars['String']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly fileAbsolutePath: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly fileAbsolutePath: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type ProjectCategory = {
  readonly color: Scalars['String'];
  readonly name: Maybe<Scalars['String']>;
};

type ProjectCategoryFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type ProjectCategoryFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type ProjectCategorySortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allGithubData: GithubDataConnection;
  readonly allGithubRepo: GithubRepoConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly githubData: Maybe<GithubData>;
  readonly githubRepo: Maybe<GithubRepo>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allGithubDataArgs = {
  filter: InputMaybe<GithubDataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GithubDataSortInput>>>;
};


type Query_allGithubRepoArgs = {
  filter: InputMaybe<GithubRepoFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<GithubRepoSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_githubDataArgs = {
  children: InputMaybe<NodeFilterListInput>;
  data: InputMaybe<GithubDataDataFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawResult: InputMaybe<GithubDataRawResultFilterInput>;
};


type Query_githubRepoArgs = {
  background: InputMaybe<StringQueryOperatorInput>;
  category: InputMaybe<ProjectCategoryFilterInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  forkCount: InputMaybe<IntQueryOperatorInput>;
  homepageUrl: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  isFork: InputMaybe<BooleanQueryOperatorInput>;
  languages: InputMaybe<StringQueryOperatorInput>;
  licenseInfo: InputMaybe<GithubDataDataUserRepositoriesNodesLicenseInfoFilterInput>;
  logoUrl: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  openGraphImageUrl: InputMaybe<StringQueryOperatorInput>;
  owner: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  schema: InputMaybe<SchemaFilterInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  stargazerCount: InputMaybe<IntQueryOperatorInput>;
  tags: InputMaybe<StringQueryOperatorInput>;
  technologies: InputMaybe<StringQueryOperatorInput>;
  tools: InputMaybe<StringQueryOperatorInput>;
  topics: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  usesCustomOpenGraphImage: InputMaybe<BooleanQueryOperatorInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  fileAbsolutePath: InputMaybe<StringQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Schema = {
  readonly applicationCategory: Maybe<Scalars['String']>;
  readonly operatingSystem: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type SchemaFieldSelector = {
  readonly applicationCategory: InputMaybe<FieldSelectorEnum>;
  readonly operatingSystem: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type SchemaFilterInput = {
  readonly applicationCategory: InputMaybe<StringQueryOperatorInput>;
  readonly operatingSystem: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type SchemaSortInput = {
  readonly applicationCategory: InputMaybe<SortOrderEnum>;
  readonly operatingSystem: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<SiteSiteMetadataAuthor>;
  readonly description: Maybe<Scalars['String']>;
  readonly iconPath: Maybe<Scalars['String']>;
  readonly shortDescription: Maybe<Scalars['String']>;
  readonly shortTitle: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly sourceUrl: Maybe<Scalars['String']>;
  readonly tagline: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataAuthor = {
  readonly alumniOf: Maybe<Scalars['String']>;
  readonly imageUrl: Maybe<Scalars['String']>;
  readonly jobTitle: Maybe<Scalars['String']>;
  readonly location: Maybe<SiteSiteMetadataAuthorLocation>;
  readonly name: Maybe<SiteSiteMetadataAuthorName>;
  readonly url: Maybe<SiteSiteMetadataAuthorUrl>;
  readonly username: Maybe<SiteSiteMetadataAuthorUsername>;
};

type SiteSiteMetadataAuthorFieldSelector = {
  readonly alumniOf: InputMaybe<FieldSelectorEnum>;
  readonly imageUrl: InputMaybe<FieldSelectorEnum>;
  readonly jobTitle: InputMaybe<FieldSelectorEnum>;
  readonly location: InputMaybe<SiteSiteMetadataAuthorLocationFieldSelector>;
  readonly name: InputMaybe<SiteSiteMetadataAuthorNameFieldSelector>;
  readonly url: InputMaybe<SiteSiteMetadataAuthorUrlFieldSelector>;
  readonly username: InputMaybe<SiteSiteMetadataAuthorUsernameFieldSelector>;
};

type SiteSiteMetadataAuthorFilterInput = {
  readonly alumniOf: InputMaybe<StringQueryOperatorInput>;
  readonly imageUrl: InputMaybe<StringQueryOperatorInput>;
  readonly jobTitle: InputMaybe<StringQueryOperatorInput>;
  readonly location: InputMaybe<SiteSiteMetadataAuthorLocationFilterInput>;
  readonly name: InputMaybe<SiteSiteMetadataAuthorNameFilterInput>;
  readonly url: InputMaybe<SiteSiteMetadataAuthorUrlFilterInput>;
  readonly username: InputMaybe<SiteSiteMetadataAuthorUsernameFilterInput>;
};

type SiteSiteMetadataAuthorLocation = {
  readonly city: Maybe<Scalars['String']>;
  readonly country: Maybe<Scalars['String']>;
  readonly state: Maybe<Scalars['String']>;
};

type SiteSiteMetadataAuthorLocationFieldSelector = {
  readonly city: InputMaybe<FieldSelectorEnum>;
  readonly country: InputMaybe<FieldSelectorEnum>;
  readonly state: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataAuthorLocationFilterInput = {
  readonly city: InputMaybe<StringQueryOperatorInput>;
  readonly country: InputMaybe<StringQueryOperatorInput>;
  readonly state: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataAuthorLocationSortInput = {
  readonly city: InputMaybe<SortOrderEnum>;
  readonly country: InputMaybe<SortOrderEnum>;
  readonly state: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataAuthorName = {
  readonly full: Maybe<Scalars['String']>;
};

type SiteSiteMetadataAuthorNameFieldSelector = {
  readonly full: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataAuthorNameFilterInput = {
  readonly full: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataAuthorNameSortInput = {
  readonly full: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataAuthorSortInput = {
  readonly alumniOf: InputMaybe<SortOrderEnum>;
  readonly imageUrl: InputMaybe<SortOrderEnum>;
  readonly jobTitle: InputMaybe<SortOrderEnum>;
  readonly location: InputMaybe<SiteSiteMetadataAuthorLocationSortInput>;
  readonly name: InputMaybe<SiteSiteMetadataAuthorNameSortInput>;
  readonly url: InputMaybe<SiteSiteMetadataAuthorUrlSortInput>;
  readonly username: InputMaybe<SiteSiteMetadataAuthorUsernameSortInput>;
};

type SiteSiteMetadataAuthorUrl = {
  readonly github: Maybe<Scalars['String']>;
  readonly linkedin: Maybe<Scalars['String']>;
  readonly x: Maybe<Scalars['String']>;
};

type SiteSiteMetadataAuthorUrlFieldSelector = {
  readonly github: InputMaybe<FieldSelectorEnum>;
  readonly linkedin: InputMaybe<FieldSelectorEnum>;
  readonly x: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataAuthorUrlFilterInput = {
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly linkedin: InputMaybe<StringQueryOperatorInput>;
  readonly x: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataAuthorUrlSortInput = {
  readonly github: InputMaybe<SortOrderEnum>;
  readonly linkedin: InputMaybe<SortOrderEnum>;
  readonly x: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataAuthorUsername = {
  readonly github: Maybe<Scalars['String']>;
  readonly x: Maybe<Scalars['String']>;
};

type SiteSiteMetadataAuthorUsernameFieldSelector = {
  readonly github: InputMaybe<FieldSelectorEnum>;
  readonly x: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataAuthorUsernameFilterInput = {
  readonly github: InputMaybe<StringQueryOperatorInput>;
  readonly x: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataAuthorUsernameSortInput = {
  readonly github: InputMaybe<SortOrderEnum>;
  readonly x: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<SiteSiteMetadataAuthorFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly iconPath: InputMaybe<FieldSelectorEnum>;
  readonly shortDescription: InputMaybe<FieldSelectorEnum>;
  readonly shortTitle: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly sourceUrl: InputMaybe<FieldSelectorEnum>;
  readonly tagline: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<SiteSiteMetadataAuthorFilterInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly iconPath: InputMaybe<StringQueryOperatorInput>;
  readonly shortDescription: InputMaybe<StringQueryOperatorInput>;
  readonly shortTitle: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly sourceUrl: InputMaybe<StringQueryOperatorInput>;
  readonly tagline: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SiteSiteMetadataAuthorSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly iconPath: InputMaybe<SortOrderEnum>;
  readonly shortDescription: InputMaybe<SortOrderEnum>;
  readonly shortTitle: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly sourceUrl: InputMaybe<SortOrderEnum>;
  readonly tagline: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type CoverLetterPageQueryVariables = Exact<{ [key: string]: never; }>;


type CoverLetterPageQuery = { readonly file: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null };

type PrivacyPolicyPageQueryVariables = Exact<{ [key: string]: never; }>;


type PrivacyPolicyPageQuery = { readonly file: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null };

type ResumePageQueryVariables = Exact<{ [key: string]: never; }>;


type ResumePageQuery = { readonly resumeSummary: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null, readonly resumeHighlights: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null };


}
